# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'race_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys
import cv2
import time
import torch
import serial
import threading
from torch.autograd import Variable
from torchvision import transforms
import torch.nn.functional as F
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow
from PyQt5.Qt import QThread
# from redis_rec.redis_utils import RedisUtils


class Ui_MainWindow(object):
    def __init__(self):
        self.timer_camera = QtCore.QTimer()  # 定义定时器，用于控制显示视频的帧率
        self.timer_camera_rec = QtCore.QTimer()
        self.cap = cv2.VideoCapture(0)  # 视频流
        self.data = [0, 0, 0, 0]
        self.labels = ["有害垃圾", "可回收垃圾", "厨余垃圾", "其他垃圾"]
        """
        class myThread(threading.Thread):
            def __init__(self):
                threading.Thread.__init__(self)
                plt.ion()
                fig, ax = plt.subplots()
                plt.bar(range(len(data)), data, tick_label=labels)
                plt.show(block = False)
        """
        """
            一、有害垃圾：7
            二、可回收垃圾：5、6
            三、厨余垃圾：2、3、4
            四、其他垃圾：0、1
        """
        self.idx_to_classes = {0: '其他垃圾_烟蒂', 1: '其他垃圾_破碎花盆及碟碗', 2: '厨余垃圾_水果果皮', 3: '厨余垃圾_水果果肉', 4: '厨余垃圾_菜叶菜根',
                               5: '可回收物_易拉罐', 6: '可回收物_饮料瓶', 7: '有害垃圾_干电池'}
        self.ind_to_CLS = {7: 0, 5: 1, 6: 1, 2: 2, 3: 2, 4: 2, 0: 3, 1: 3}

        # self.model_ft = torch.load('./weights/resnet50_resize224_cls8_aug.pth', map_location="cpu")
        # self.model_ft.eval()
        # self.normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        # self.preprocess = transforms.Compose([
        #     transforms.Resize((224, 224)),
        #     transforms.ToTensor(),
        #     self.normalize
        # ])

    def setupUi(self, MainWindow):
        # MainWindow.setObjectName("MainWindow")
        # MainWindow.resize(868, 600)
        # self.centralwidget = QtWidgets.QWidget(MainWindow)
        # self.centralwidget.setObjectName("centralwidget")
        # self.label = QtWidgets.QLabel(self.centralwidget)
        # self.label.setGeometry(QtCore.QRect(0, 0, 571, 571))
        # self.label.setObjectName("label")
        # self.label_2 = QtWidgets.QLabel(self.centralwidget)
        # self.label_2.setGeometry(QtCore.QRect(580, 20, 161, 81))
        # font = QtGui.QFont()
        # font.setFamily("微软雅黑")
        # font.setPointSize(14)
        # self.label_2.setFont(font)
        # self.label_2.setIndent(7)
        # self.label_2.setObjectName("label_2")
        # self.label_3 = QtWidgets.QLabel(self.centralwidget)
        # self.label_3.setGeometry(QtCore.QRect(700, 20, 151, 81))
        # font = QtGui.QFont()
        # font.setFamily("微软雅黑")
        # font.setPointSize(14)
        # self.label_3.setFont(font)
        # self.label_3.setIndent(6)
        # self.label_3.setObjectName("label_3")
        # self.khslj = QtWidgets.QLCDNumber(self.centralwidget)
        # self.khslj.setGeometry(QtCore.QRect(600, 110, 221, 61))
        # self.khslj.setObjectName("khslj")
        # self.bkhslj = QtWidgets.QLCDNumber(self.centralwidget)
        # self.bkhslj.setGeometry(QtCore.QRect(600, 190, 221, 61))
        # self.bkhslj.setObjectName("bkhslj")
        # self.yhlj = QtWidgets.QLCDNumber(self.centralwidget)
        # self.yhlj.setGeometry(QtCore.QRect(600, 270, 221, 61))
        # self.yhlj.setObjectName("yhlj")
        # self.qtlj = QtWidgets.QLCDNumber(self.centralwidget)
        # self.qtlj.setGeometry(QtCore.QRect(600, 350, 221, 61))
        # self.qtlj.setObjectName("qtlj")
        # self.label_4 = QtWidgets.QLabel(self.centralwidget)
        # self.label_4.setGeometry(QtCore.QRect(590, 430, 81, 81))
        # font = QtGui.QFont()
        # font.setFamily("微软雅黑")
        # font.setPointSize(12)
        # self.label_4.setFont(font)
        # self.label_4.setIndent(3)
        # self.label_4.setObjectName("label_4")
        # self.zj = QtWidgets.QLCDNumber(self.centralwidget)
        # self.zj.setGeometry(QtCore.QRect(600, 440, 221, 61))
        # self.zj.setObjectName("zj")
        # self.label_5 = QtWidgets.QLabel(self.centralwidget)
        # self.label_5.setGeometry(QtCore.QRect(580, 240, 141, 121))
        # font = QtGui.QFont()
        # font.setFamily("微软雅黑")
        # font.setPointSize(12)
        # self.label_5.setFont(font)
        # self.label_5.setIndent(7)
        # self.label_5.setObjectName("label_5")
        # self.label_6 = QtWidgets.QLabel(self.centralwidget)
        # self.label_6.setGeometry(QtCore.QRect(580, 100, 141, 81))
        # palette = QtGui.QPalette()
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        # brush = QtGui.QBrush(QtGui.QColor(127, 212, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        # brush = QtGui.QBrush(QtGui.QColor(63, 191, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 113, 170))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        # brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        # brush = QtGui.QBrush(QtGui.QColor(127, 212, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        # brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        # brush = QtGui.QBrush(QtGui.QColor(127, 212, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        # brush = QtGui.QBrush(QtGui.QColor(63, 191, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 113, 170))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        # brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        # brush = QtGui.QBrush(QtGui.QColor(127, 212, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        # brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        # brush = QtGui.QBrush(QtGui.QColor(127, 212, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        # brush = QtGui.QBrush(QtGui.QColor(63, 191, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 113, 170))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        # brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        # brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        # brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        # brush.setStyle(QtCore.Qt.SolidPattern)
        # palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        # self.label_6.setPalette(palette)
        # font = QtGui.QFont()
        # font.setFamily("微软雅黑")
        # font.setPointSize(12)
        # self.label_6.setFont(font)
        # self.label_6.setAutoFillBackground(False)
        # self.label_6.setIndent(7)
        # self.label_6.setObjectName("label_6")
        # self.label_7 = QtWidgets.QLabel(self.centralwidget)
        # self.label_7.setGeometry(QtCore.QRect(580, 340, 141, 81))
        # font = QtGui.QFont()
        # font.setFamily("微软雅黑")
        # font.setPointSize(12)
        # self.label_7.setFont(font)
        # self.label_7.setIndent(7)
        # self.label_7.setObjectName("label_7")
        # self.label_8 = QtWidgets.QLabel(self.centralwidget)
        # self.label_8.setGeometry(QtCore.QRect(580, 170, 171, 101))
        # font = QtGui.QFont()
        # font.setFamily("微软雅黑")
        # font.setPointSize(12)
        # self.label_8.setFont(font)
        # self.label_8.setIndent(7)
        # self.label_8.setObjectName("label_8")
        # self.zj.raise_()
        # self.label.raise_()
        # self.label_2.raise_()
        # self.label_3.raise_()
        # self.khslj.raise_()
        # self.bkhslj.raise_()
        # self.yhlj.raise_()
        # self.qtlj.raise_()
        # self.label_4.raise_()
        # self.label_5.raise_()
        # self.label_6.raise_()
        # self.label_7.raise_()
        # self.label_8.raise_()
        # MainWindow.setCentralWidget(self.centralwidget)
        # self.menubar = QtWidgets.QMenuBar(MainWindow)
        # self.menubar.setGeometry(QtCore.QRect(0, 0, 868, 23))
        # self.menubar.setObjectName("menubar")
        # MainWindow.setMenuBar(self.menubar)
        # self.statusbar = QtWidgets.QStatusBar(MainWindow)
        # self.statusbar.setObjectName("statusbar")
        # MainWindow.setStatusBar(self.statusbar)
        #
        # self.retranslateUi(MainWindow)
        # QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(790, 584)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setMinimumSize(QtCore.QSize(0, 400))
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_8.setFont(font)
        self.label_8.setIndent(7)
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_8.addWidget(self.label_8)
        self.bkhslj = QtWidgets.QLCDNumber(self.centralwidget)
        self.bkhslj.setObjectName("bkhslj")
        self.horizontalLayout_8.addWidget(self.bkhslj)
        self.verticalLayout.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_7.setFont(font)
        self.label_7.setIndent(7)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_10.addWidget(self.label_7)
        self.qtlj = QtWidgets.QLCDNumber(self.centralwidget)
        self.qtlj.setObjectName("qtlj")
        self.horizontalLayout_10.addWidget(self.qtlj)
        self.verticalLayout.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setEnabled(True)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 212, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 191, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 113, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 212, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 212, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 191, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 113, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 212, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 212, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(63, 191, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 113, 170))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 85, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 170, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        self.label_6.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_6.setFont(font)
        self.label_6.setAutoFillBackground(False)
        self.label_6.setIndent(7)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_7.addWidget(self.label_6)
        self.khslj = QtWidgets.QLCDNumber(self.centralwidget)
        self.khslj.setObjectName("khslj")
        self.horizontalLayout_7.addWidget(self.khslj)
        self.verticalLayout.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_5.setFont(font)
        self.label_5.setIndent(7)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_9.addWidget(self.label_5)
        self.yhlj = QtWidgets.QLCDNumber(self.centralwidget)
        self.yhlj.setObjectName("yhlj")
        self.horizontalLayout_9.addWidget(self.yhlj)
        self.verticalLayout.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(20)
        self.label_4.setFont(font)
        self.label_4.setIndent(3)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_11.addWidget(self.label_4)
        self.zj = QtWidgets.QLCDNumber(self.centralwidget)
        self.zj.setObjectName("zj")
        self.horizontalLayout_11.addWidget(self.zj)
        self.verticalLayout.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_3.addLayout(self.verticalLayout)
        self.horizontalLayout.addLayout(self.horizontalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 790, 23))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.timer_camera.timeout.connect(self.show_camera)
        self.timer_camera.start(30)
        #self.timer_camera_rec.timeout.connect(self.rec_camera)
        #self.timer_camera_rec.start(30)
        # 开启识别线程
        gbTR = gabCls_Thread(self.cap,self.khslj,self.bkhslj,self.yhlj,self.qtlj,self.zj)
        # 设置线程为守护线程，防止退出主线程时，子线程仍在运行:https://blog.csdn.net/whuzhang16/article/details/108627617
        gbTR.setDaemon(True)
        gbTR.start()

    def show_camera(self):
        flag, self.image = self.cap.read()  # 从视频流中读取
        # print("self.cap",type(self.cap))
        # print("self.image",self.image)
        if self.image is not None:
            show = cv2.resize(self.image, (640, 480))  # 把读到的帧的大小重新设置为 640x480
            show = cv2.cvtColor(show, cv2.COLOR_BGR2RGB)  # 视频色彩转换回RGB，这样才是现实的颜色
            showImage = QtGui.QImage(show.data, show.shape[1], show.shape[0],
                                 QtGui.QImage.Format_RGB888)  # 把读取到的视频数据变成QImage形式
            self.label.setPixmap(QtGui.QPixmap.fromImage(showImage))  # 往显示视频的Label里 显示QImage

    # def rec_camera(self):
    #     flag, self.image = self.cap.read()
    #     print("self.image")
    #     gbTR = gabCls_Thread(self.image)
    #     gbTR.start()

    def wt(self,data):
        try:
          #端口，GNU / Linux上的/ dev / ttyUSB0 等 或 Windows上的 COM3 等
          portx="/dev/ttyUSB0"
          #波特率，标准值之一：50,75,110,134,150,200,300,600,1200,1800,2400,4800,9600,19200,38400,57600,115200
          bps=9600
          #超时设置,None：永远等待操作，0为立即返回请求结果，其他值为等待超时时间(单位为秒）
          timex=5
          # 打开串口，并得到串口对象
          ser=serial.Serial(portx,bps,timeout=timex)

          # 写数据
          result=ser.write((str(data)+'\r\n').encode('utf-8'))
          print(data)
          ser.close()#关闭串口

        except Exception as e:
            print("---异常---：",e)

    # def classify(self,img):
    #     outputs=self.model_ft(Variable(img))
    #     pred,ind=torch.max(F.softmax(outputs,dim=1).data,1)
    #     return pred.item(),ind.item()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "TextLabel"))
        self.label_8.setText(_translate("MainWindow", "厨余垃圾"))
        self.label_7.setText(_translate("MainWindow", "其他垃圾"))
        self.label_6.setText(_translate("MainWindow", "可回收垃圾"))
        self.label_5.setText(_translate("MainWindow", "有害垃圾"))
        self.label_4.setText(_translate("MainWindow", "总计"))
    # def retranslateUi(self, MainWindow):
    #     _translate = QtCore.QCoreApplication.translate
    #     MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
    #     self.label.setText(_translate("MainWindow", "TextLabel"))
    #     self.label_2.setText(_translate("MainWindow", "垃圾类别"))
    #     self.label_3.setText(_translate("MainWindow", "累计数量"))
    #     self.label_4.setText(_translate("MainWindow", "总计"))
    #     self.label_5.setText(_translate("MainWindow", "有害垃圾"))
    #     self.label_6.setText(_translate("MainWindow", "可回收垃圾"))
    #     self.label_7.setText(_translate("MainWindow", "其他垃圾"))
    #     self.label_8.setText(_translate("MainWindow", "不可回收垃圾"))

    def clickButtonCloseWindow(self):
        self.close()


# class gabCls_Thread(QThread): QThread 无效
class gabCls_Thread(threading.Thread):
    def __init__(self,cap,khslj,bkhslj,yhlj,qtlj,zj):
        super(gabCls_Thread,self).__init__()
        self.cap = cap

        self.data = [0, 0, 0, 0]
        self.labels = ["有害垃圾", "可回收垃圾", "厨余垃圾", "其他垃圾"]
        """
        class myThread(threading.Thread):
            def __init__(self):
                threading.Thread.__init__(self)
                plt.ion()
                fig, ax = plt.subplots()
                plt.bar(range(len(data)), data, tick_label=labels)
                plt.show(block = False)
        """
        """
            一、有害垃圾：7
            二、可回收垃圾：5、6
            三、厨余垃圾：2、3、4
            四、其他垃圾：0、1
        """
        self.idx_to_classes = {0: '其他垃圾_烟蒂', 1: '其他垃圾_破碎花盆及碟碗', 2: '厨余垃圾_水果果皮', 3: '厨余垃圾_水果果肉', 4: '厨余垃圾_菜叶菜根',
                          5: '可回收物_易拉罐', 6: '可回收物_饮料瓶', 7: '有害垃圾_干电池'}
        self.ind_to_CLS = {7: 0, 5: 1, 6: 1, 2: 2, 3: 2, 4: 2, 0: 3, 1: 3}
        self.model_ft = torch.load('./weights/resnet50_resize224_cls8_aug.pth', map_location="cpu")
        self.model_ft.eval()
        self.normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
        self.preprocess = transforms.Compose([
            transforms.Resize((224, 224)),
            transforms.ToTensor(),
            self.normalize
        ])
        self.khslj = khslj
        self.bkhslj = bkhslj
        self.yhlj = yhlj
        self.qtlj = qtlj
        self.zj = zj

    def wt(self,data):
        try:
          #端口，GNU / Linux上的/ dev / ttyUSB0 等 或 Windows上的 COM3 等
          portx="/dev/ttyUSB0"
          #波特率，标准值之一：50,75,110,134,150,200,300,600,1200,1800,2400,4800,9600,19200,38400,57600,115200
          bps=9600
          #超时设置,None：永远等待操作，0为立即返回请求结果，其他值为等待超时时间(单位为秒）
          timex=5
          # 打开串口，并得到串口对象
          ser=serial.Serial(portx,bps,timeout=timex)

          # 写数据
          result=ser.write((str(data)+'\r\n').encode('utf-8'))
          print(data)
          ser.close()#关闭串口

        except Exception as e:
            print("---异常---：",e)

    def classify(self,img):
        outputs=self.model_ft(Variable(img))
        pred,ind=torch.max(F.softmax(outputs,dim=1).data,1)
        return pred.item(),ind.item()

    def receive(self):
        portx = "/dev/ttyUSB0"
        # 波特率，标准值之一：50,75,110,134,150,200,300,600,1200,1800,2400,4800,9600,19200,38400,57600,115200
        bps = 9600
        # 打开串口，并得到串口对象
        ser = serial.Serial(portx, bps, timeout=None)
        while True:
            try:
                # 读数据
                result = ser.read(1)
                print(result)
                if result == b'8':
                    ser.close()  # 关闭串口
                    break
            except Exception as e:
                print("---异常---：", e)

    def run(self):
        while True:
            flag,self.image = self.cap.read()
            pil_img = Image.fromarray(cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB))
            img = self.preprocess(pil_img)
            img = img.unsqueeze(0)
            # model_ft = model_ft
            pred, ind = self.classify(img)
            print("The probablity is :", pred)
            print("The class belongs to :", self.idx_to_classes[ind])
            if pred > 0.7:
                # 将0-7的索引映射到一、二、三、四的4个大类
                real_ind = self.ind_to_CLS[ind]
                self.data[real_ind] += 1
                # 更新界面数字 ["有害垃圾", "可回收垃圾", "厨余垃圾", "其他垃圾"]
                self.khslj.display(self.data[1])
                self.bkhslj.display(self.data[2])
                self.yhlj.display(self.data[0])
                self.qtlj.display(self.data[3])
                self.zj.display(sum(self.data))
                print("self.data",self.data)
                # self.show_camera(self.image)
                self.wt(ind)
                self.receive()
            # if self.image is not None:
            #     upload_path = os.path.join(os.path.dirname(os.path.abspath(__file__)),'./static/images', "rec.jpg")  # 注意：没有该文件夹要先创建，不然会提示没有该路径
            #     cv2.imwrite(upload_path,self.image)
            #     redis_utils = RedisUtils()  # 初始化redis工具类
            #     new_filename = str(time.time())
            #     task_value = {'path': upload_path, 'key': new_filename}  # 生成任务,key对应图片名称
            #     redis_utils.push_task(task_value)  # 任务下发到redis
            #     result = redis_utils.get_result(new_filename)  # 从redis中读取识别结果
            #     print(result)
        # flag, self.image = self.cap.read()
        # self.cap.release()
        # if self.image is not None:
        #     pil_img = Image.fromarray(cv2.cvtColor(self.image, cv2.COLOR_BGR2RGB))
        #     img = self.preprocess(pil_img)
        #     img = img.unsqueeze(0)
        #     os.system("python garbage_cls.py")
            # model_ft = model_ft
            # pred, ind = self.classify(self.model_ft, img)
            # print("The probablity is :", pred)
            # print("The class belongs to :", self.idx_to_classes[ind])
            # if pred > 0.7:
            #     # 将0-7的索引映射到一、二、三、四的4个大类
            #     real_ind = self.ind_to_CLS[ind]
            #     self.data[real_ind] += 1
            #     print("self.data",self.data)
            #     self.wt(ind)
